// Generated by gencpp from file machines/MAMstatus.msg
// DO NOT EDIT!


#ifndef MACHINES_MESSAGE_MAMSTATUS_H
#define MACHINES_MESSAGE_MAMSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace machines
{
template <class ContainerAllocator>
struct MAMstatus_
{
  typedef MAMstatus_<ContainerAllocator> Type;

  MAMstatus_()
    : header()
    , engage(false)
    , done(false)
    , error(false)
    , inProcess(false)
    , complete(false)
    , position(0.0)  {
    }
  MAMstatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , engage(false)
    , done(false)
    , error(false)
    , inProcess(false)
    , complete(false)
    , position(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _engage_type;
  _engage_type engage;

   typedef uint8_t _done_type;
  _done_type done;

   typedef uint8_t _error_type;
  _error_type error;

   typedef uint8_t _inProcess_type;
  _inProcess_type inProcess;

   typedef uint8_t _complete_type;
  _complete_type complete;

   typedef double _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::machines::MAMstatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::machines::MAMstatus_<ContainerAllocator> const> ConstPtr;

}; // struct MAMstatus_

typedef ::machines::MAMstatus_<std::allocator<void> > MAMstatus;

typedef boost::shared_ptr< ::machines::MAMstatus > MAMstatusPtr;
typedef boost::shared_ptr< ::machines::MAMstatus const> MAMstatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::machines::MAMstatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::machines::MAMstatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace machines

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'machines': ['/home/dhruv/MOS_ws/src/machines/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::machines::MAMstatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::machines::MAMstatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::machines::MAMstatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::machines::MAMstatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::machines::MAMstatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::machines::MAMstatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::machines::MAMstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14b63e6a6cf35762331b707484ff880e";
  }

  static const char* value(const ::machines::MAMstatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14b63e6a6cf35762ULL;
  static const uint64_t static_value2 = 0x331b707484ff880eULL;
};

template<class ContainerAllocator>
struct DataType< ::machines::MAMstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "machines/MAMstatus";
  }

  static const char* value(const ::machines::MAMstatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::machines::MAMstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"bool engage\n"
"bool done\n"
"bool error\n"
"bool inProcess\n"
"bool complete\n"
"float64 position\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::machines::MAMstatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::machines::MAMstatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.engage);
      stream.next(m.done);
      stream.next(m.error);
      stream.next(m.inProcess);
      stream.next(m.complete);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MAMstatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::machines::MAMstatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::machines::MAMstatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "engage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engage);
    s << indent << "done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.done);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "inProcess: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inProcess);
    s << indent << "complete: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.complete);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MACHINES_MESSAGE_MAMSTATUS_H
